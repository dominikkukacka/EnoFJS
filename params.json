{"name":"Enofjs","body":"EnoFJS\r\n======\r\nOO based programming in Javascript, is often hard to understand. \r\nMost people with a C# or Java background often lose track of the \r\nvariable scopes. \r\n\r\nKeep in mind that Javascript won't be compiled like C# or Java. \r\nThis means that all errors like undeclared members/typo's, etc. \r\nwon't be found untill your code is reached. Therefore it's highly\r\nrecommended to use a unit test framework, such as Jasmine.\r\n\r\nGoal\r\n----\r\nIn EnoFJS the C# or Java like class is simulated in Javascript.\r\nThe goal of this project, is to help people understand Javascript \r\nand its way of scoping variables. \r\n\r\nOverview\r\n--------\r\nEnoFJS is a layer, that translates your class declaration into\r\na class with your declared scoping on methods and properties. To \r\nmake this work, you need to understand OO-programming. The examples \r\nshould be sufficient for an advanced OO-programmer.\r\n\r\nSupport\r\n-------\r\nAt this moment EnoFJS supports:\r\n * Namespacing\r\n * Class Declarations\r\n * public properties\r\n * public methods\r\n * protected properties\r\n * protected methods\r\n * private properties\r\n * private methods\r\n * Class Constants\r\n * Class Extentions\r\n * Class Imports\r\n\r\nExameples\r\n--------\r\nDeclaring a class\r\n\r\n    Class('Test', function(){});\r\n    var test = new Test();\r\n    \r\nDeclaring properties\r\n\r\n    Class('Test', function(){\r\n        this.privateProperty('boolean', 'foo', false);\r\n        this.publicProperty('string', 'food', 'banana');\r\n        this.protectedProperty('integer', 'fool', 0);\r\n        this.privateMethod('boolean', 'getFoo', function(){\r\n            return this.foo;\r\n        });\r\n        this.publicMethod('string', 'getFood', function(){\r\n            return this.food;\r\n        });\r\n        this.protectedMethod('boolean', 'upFool', function(){\r\n            this.fool++;\r\n        });\r\n    });\r\n    \r\nDeclaring constants\r\n\r\n    Class('Test', \r\n    function(){}, \r\n    function(){\r\n        this.constants('string', 'FOO', 'BAR');\r\n    });\r\n    \r\n    Test.FOO;//BAR\r\n\r\nPackage a class\r\n\r\n    Class('com.provictores.Test', function(){});\r\n    var test = new com.provictores.Test();\r\n    \r\nImport a class\r\n\r\n    Class('com.provictores.Foo', function(){\r\n        this.publicProperty('string', 'food', 'banana');\r\n    });\r\n    \r\n    Class('com.provictores.Bar', function(){\r\n        this.import('com.provictores.Foo'); //access with this.Foo\r\n        \r\n        this.publicMethod('string', 'getFood', function(){\r\n            return this.Foo.food; //banana\r\n        });\r\n    });\r\n\r\nExtending a class\r\n\r\n    Class('com.provictores.Foo', function(){\r\n        this.privateProperty('boolean', 'foo', false);\r\n        this.publicProperty('string', 'food', 'banana');\r\n        this.protectedProperty('integer', 'fool', 0);\r\n        this.privateMethod('boolean', 'getFoo', function(){\r\n            return this.foo;\r\n        });\r\n        this.publicMethod('string', 'getFood', function(){\r\n            return this.food;\r\n        });\r\n        this.protectedMethod('boolean', 'upFool', function(){\r\n            this.fool++;\r\n        });\r\n    });\r\n    \r\n    Class('com.provictores.Bar', function(){\r\n        this.extends('com.provictores.Foo'); \r\n        \r\n        // @overides the method in foo\r\n        this.publicMethod('string', 'getFood', function(){\r\n            //this.foo will return \"undefined\" as food is a private property\r\n            //this.food will return \"banana\" as food is a public property\r\n            //this.upFool will execute the method upFool as this is a protected method\r\n            return \"I \" + this.foo + \" \" + this.food + \" and I said this \" + this.upFool() + \" times\";\r\n        });\r\n    });\r\n","tagline":"OO based programming in Javascript","google":"UA-32226156-1","note":"Don't delete this file! It's used internally to help with page regeneration."}