{"name":"Enofjs","tagline":"Inheritance in Javascript","body":"EnoFJS\r\n======\r\nJavascript supports private and public out of the box. However\r\ninheritance is often claimed impossible or done with prototype.\r\n\r\nWhile inheriting with prototype is not necessarily bad, it\r\nhowever implies that all inheritable properties have to be public\r\nand all properties should be public in case a function in the\r\nprototype needs to access it.\r\n\r\nGoal\r\n----\r\nEnoFJS is purpose is to make it easy to handle inheritance and\r\nmaking it visible what the accessibility is of an property.\r\n\r\nSupport\r\n-------\r\nEnoFJS supports:\r\n * public scoping\r\n * private scoping\r\n * protected scoping\r\n * extending\r\n * super access\r\n\r\nExamples\r\n--------\r\nDeclaring an empty class\r\n\r\n    var Animal = Class(function Animal() {\r\n\r\n    });\r\n\r\n    var animal = new Animal();\r\n    \r\nDeclaring private scope\r\n\r\n    var Animal = Class(function Animal() {\r\n        this.private = {\r\n            privateFoo: 'foo',\r\n            privateBar: function privateBar() {\r\n            }\r\n        };\r\n\r\n        this.constructor = function constructor(){\r\n        };\r\n    });\r\n    \r\nDeclaring public scope\r\n\r\n    var Animal = Class(function Animal() {\r\n        this.public = {\r\n            publicFoo: 'foo',\r\n            publicBar: function privateBar() {\r\n            }\r\n        };\r\n\r\n        this.constructor = function constructor(){\r\n        };\r\n    });\r\n\r\nDeclaring protected scope\r\n\r\n    var Animal = Class(function Animal() {\r\n        this.protected = {\r\n            protectedFoo: 'foo',\r\n            protectedBar: function privateBar() {\r\n            }\r\n        };\r\n\r\n        this.constructor = function constructor(){\r\n        };\r\n    });\r\n\r\nDeclaring a constructor\r\n\r\n    var Animal = Class(function Animal() {\r\n        this.private = {\r\n            privateFoo: null,\r\n            privateBar: function privateBar() {\r\n            }\r\n        };\r\n\r\n        this.constructor = function constructor(foo){\r\n            this.private.foo = foo;\r\n        };\r\n    });\r\n\r\nExtending a class\r\n\r\n    var Animal = Class(function Animal() {\r\n        this.private = {\r\n            birthDate: new Date()\r\n        };\r\n\r\n        this.protected = {\r\n            formatBirthDate: function formatBirthDate() {\r\n                return this.private.birthDate.toString();\r\n            }\r\n        };\r\n\r\n        this.public = {\r\n            getBirthDate: function getBirthDate() {\r\n                return 'I am born at' + this.protected.formatBirthDate();\r\n            };\r\n        };\r\n\r\n        this.constructor = function constructor(birthDate){\r\n            if(birthDate instanceof Date){\r\n                this.private.birthDate = birthDate;\r\n            }\r\n        };\r\n    });\r\n\r\n    var Dog = Class(function Dog() {\r\n        this.extend = Animal;\r\n\r\n        this.constructor = function(birthDate){\r\n            this.super.constructor(birthDate);\r\n        };\r\n    });\r\n\r\n    var dog = new Dog(new Date());\r\n\r\nFor more details take a look at the [ClassFactorySpec](test/spec/ClassFactorySpec.js)\r\n","google":"UA-32226156-1","note":"Don't delete this file! It's used internally to help with page regeneration."}